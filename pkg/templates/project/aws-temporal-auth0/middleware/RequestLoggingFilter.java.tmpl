package {{package}}.middleware;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.MDC;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.util.UUID;

/**
 * A servlet filter that logs incoming HTTP requests and adds request tracing.
 * Integrates with Datadog for distributed tracing.
 */
@Component
@RequiredArgsConstructor
public class RequestLoggingFilter extends OncePerRequestFilter {

    private static final Logger logger = LoggerFactory.getLogger(RequestLoggingFilter.class);
    private static final String REQUEST_ID_HEADER = "X-Request-ID";
    private static final String TRACE_ID_MDC_KEY = "traceId";

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {
        
        long startTime = System.currentTimeMillis();
        String requestId = request.getHeader(REQUEST_ID_HEADER);
        
        // Generate request ID if not provided
        if (requestId == null || requestId.isEmpty()) {
            requestId = UUID.randomUUID().toString();
        }
        
        // Add the request ID to MDC for logging
        MDC.put(TRACE_ID_MDC_KEY, requestId);
        
        // Add the request ID to the response headers
        response.addHeader(REQUEST_ID_HEADER, requestId);
        
        try {
            logger.info("Request started: {} {} from {}", 
                    request.getMethod(), 
                    request.getRequestURI(),
                    request.getRemoteAddr());
            
            // Continue with the filter chain
            filterChain.doFilter(request, response);
            
            long duration = System.currentTimeMillis() - startTime;
            logger.info("Request completed: {} {} - Status: {} - Duration: {}ms", 
                    request.getMethod(), 
                    request.getRequestURI(),
                    response.getStatus(),
                    duration);
            
        } finally {
            // Always clear the MDC after the request is processed
            MDC.remove(TRACE_ID_MDC_KEY);
        }
    }
} 